{"pages":[],"posts":[{"title":"axios 封装","text":"通过阅读 axios 中文文档，我对 axios 作出了如下封装：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import axios from 'axios';import QS from 'qs'; //对发送的数据进行处理axios.defaults.baseURL = 'http://192.168.0.197:8088';// 添加请求拦截器axios.interceptors.request.use( function (config) { // console.log(config); // 拦截于请求发送之前,可以看到发起的请求中的各项参数，携带的请求头，请求的url以及发给服务端的数据 return config; }, function (error) { // 对请求错误做些什么 return Promise.reject(error); });// 添加响应拦截器axios.interceptors.response.use( function (response) { // 对响应数据做点什么 // console.log(response); // 请求发送完之后接受到的响应数据 return response; }, function (error) { // 对响应错误做点什么 return Promise.reject(error); });export default { //统一定义一个option,通过调用不同方式的请求区构造这个option,最后通过axios(option)去发起请求 baseOption(params: any, method?: string) { let { url, data } = params; let option = { url: url, method: !method ? 'get' : method, data: QS.stringify(data), headers: { 'Content-type': 'application/x-www-form-urlencoded;charset=UTF-8', Authorization: '', token: '', }, }; return axios(option); }, get(url: string, data?: any) { let params = { url, data }; return this.baseOption(params); }, post(url: string, data?: any) { let params = { url, data }; return this.baseOption(params, 'post'); }, put(url: string, data?: any) { let params = { url, data }; return this.baseOption(params, 'put'); }, delete(url: string, data?: any) { let params = { url, data }; return this.baseOption(params, 'delete'); },};","link":"/2019/05/18/axios%E5%B0%81%E8%A3%85/"},{"title":"MySQL数据库批量更改表与字段编码","text":"今天在开发过程中遇到一个问题，使用 FIND_IN_SET 和自己写的查询所有子元素及本身的 MySQL 函数时，报’Illegal mix of collations(utf8_general_ci,IMPLICIT) and (utf8_unicode_ci,IMPLICIT) for operation’,了解到是表的编码出现了问题，于是对整个数据库中的表进行了检查，发现编码不统一的表情况不在少数，于是便想批量改一下数据库中表的编码格式(PS:表太多，一个一个改起来比较费劲)，然后度娘了一下找到了这么一段代码123456789101112131415161718192021222324252627282930SELECT CONCAT( 'ALTER TABLE `', table_name, '` MODIFY `', column_name, '` ', DATA_TYPE, '(', CHARACTER_MAXIMUM_LENGTH, ') CHARACTER SET UTF8 COLLATE utf8_unicode_ci', ( CASE WHEN IS_NULLABLE = 'NO' THEN ' NOT NULL' ELSE '' END ), ';' )FROM information_schema. COLUMNSWHERE TABLE_SCHEMA = 'database'AND DATA_TYPE = 'text'AND ( CHARACTER_SET_NAME != 'utf8' OR COLLATION_NAME != 'utf8_unicode_ci') INTO OUTFILE &quot;path/a.txt&quot;; CHARACTER SET UTF8 COLLATE utf8_unicode_ci 中的 utf8 和 utf8_unicode_ci 是可以根据应用场景替换的 information_schema，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。在 MySQL 中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于 MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在 INFORMATION_SCHEMA 中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。TABLE_SCHEMA = ‘database’ 此处的 database 就是你要操作的数据库名 DATA_TYPE = ‘text’ 的 text 就是你要改变的字段类型，可以是 varchar 等 CHARACTER_SET_NAME != ‘utf8’ OR COLLATION_NAME != ‘utf8_unicode_ci’ 为判断条件，要改变那些符合范围的表中字段编码”path/a.txt”为文件输出的路径，PS:这个路径需要被数据库承认，如果不知道路径被不被承认，可以先 show variables like ‘%secure%’;然后将 secure_file_priv 后的路径和 path 替换,如果你的数据库建立到了服务器上，相应的，你应该到服务器的该路径下去找这个文件","link":"/2018/09/26/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%B9%E9%87%8F%E6%9B%B4%E6%94%B9%E8%A1%A8%E4%B8%8E%E5%AD%97%E6%AE%B5%E7%BC%96%E7%A0%81/"},{"title":"npm 和 yarn 命令对比","text":"npm 和 yarn 命令对比 作用 npm yarn 安装 npm install(i) yarn 全局安装 npm install xxx –-global yarn global add 卸载 npm uninstall(un) yarn remove 安装包 npm install xxx –save(-S) yarn add xxx 开发模式安装包 npm install xxx –save-dev(-D) yarn add xxx –dev(-D) 更新 npm update –save yarn upgrade 全局更新 npm update –global yarn global upgrade 清除缓存 npm cache clean yarn cache clean 重装 rm -rf node_modules &amp;&amp; npm install yarn upgrade","link":"/2018/12/19/npm%E5%92%8Cyarn%E5%91%BD%E4%BB%A4%E5%AF%B9%E6%AF%94/"},{"title":"vuex创建Action的简单封装","text":"vuex创建Action的简单封装在看了 vuex action 的建立方式后，发现写起来比较复杂，于是自己写了个 action 的工具类，方便快速的创建 action 1234567891011121314151617181920212223242526272829303132/** * @Author: Arionbat * @Date: 2019-05-17 18:31:57 * @Last Modified by: Arionbat * @Last Modified time: 2019-05-17 18:46:36 * @Description: 创建Action的工具类 */import { Commit } from 'vuex';/** * @description 创建无异步请求的action * @param actionType * @param payload */export const createAction = (actionType: string, payload?: any) =&gt; { return (context: { commit: Commit }) =&gt; { context.commit(actionType, payload); };};/** * @description 创建有异步请求的action * @param actionType * @param func */export const createApiAction = (actionType: string, func = (params: any) =&gt; {}) =&gt; { return async (context: { commit: Commit }, params: any) =&gt; { const data = await func(params); context.commit(actionType, data); return data; };}; 由于我的项目的技术栈是 vue+vuex+router+typescript,所以只写了 typescript 的，有需要 js 版本的请参考这个自己更改，下面贴出使用工具类前后的代码 123456789101112131415161718192021222324import { Commit, Action, ActionTree } from 'vuex';import * as types from './mutation-types';import { State } from './index';import * as user from '@/api/user';import { createApiAction, createAction } from '@/utils/action_util';// const login: Action&lt;State, any&gt; = (// context: { commit: Commit },// userInfo: any// ) =&gt; {// user.login(userInfo).then(res =&gt; {// context.commit(types.SET_TOKEN, res.data.data.token);// });// };const login = createApiAction(types.LOGIN, user.login);const setToken = createAction(types.SET_TOKEN);const actions: ActionTree&lt;State, any&gt; = { login, setToken,};export default actions; 上面代码中，注释掉的部分是之前的没使用工具类的，下面的是使用工具类之后的方式，如有不正确的地方，请大家指正","link":"/2019/05/18/vuex%E5%88%9B%E5%BB%BAAction%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/"},{"title":"初识 Vue","text":"之前就想学 Vue，一直被拖着，今天总算找了一下午时间看了一下，发现 Vue 的数据渲染模式和微信小程序，差不多(PS:我是先做的小程序开发，后接触的 Vue,我知道微信小程序借鉴了一些 Vue 的理念)，今天在和 element ui 结合使用的时候，发现了一些问题，记录一下 在使用 element ui 封装组件的时候，非 html 原生元素，添加 ref,需要在 vue 生命周期的 mountedz 中去使用，直接使用 this.$refs.{ref}的话会显示 undefined。 在注册组件的时候，组件页面只能有一个根节点。 export default 和 new Vue 的功能基本一致，，不同的是绑定元素一个是 name,一个是 el 或许是我的了解比较片面，export default 是 es6 的语法。 目前只有这些，待续","link":"/2018/09/26/%E5%88%9D%E8%AF%86Vue/"}],"tags":[{"name":"axios","slug":"axios","link":"/tags/axios/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Vuex","slug":"Vuex","link":"/tags/Vuex/"},{"name":"Vue","slug":"Vue","link":"/tags/Vue/"}],"categories":[{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"数据库","slug":"数据库","link":"/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}