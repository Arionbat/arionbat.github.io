<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arionbat的博客</title>
  <icon>https://arionbat.github.io/icon.png</icon>
  
  <link href="https://arionbat.github.io/atom.xml" rel="self"/>
  
  <link href="https://arionbat.github.io/"/>
  <updated>2022-01-11T08:58:52.702Z</updated>
  <id>https://arionbat.github.io/</id>
  
  <author>
    <name>Aronbat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图床搭建</title>
    <link href="https://arionbat.github.io/2022/01/11/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <id>https://arionbat.github.io/2022/01/11/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</id>
    <published>2022-01-11T07:38:52.000Z</published>
    <updated>2022-01-11T08:58:52.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、购买阿里云OSS对象存储搭建图床服务"><a href="#一、购买阿里云OSS对象存储搭建图床服务" class="headerlink" title="一、购买阿里云OSS对象存储搭建图床服务"></a>一、购买阿里云OSS对象存储搭建图床服务</h3><ol><li>根据需求选购对应的OSS产品<img src="https://arionbat-blog.oss-cn-shanghai.aliyuncs.com/img/202201111642677.png?x-oss-process=style/watermark" alt="image-20220111164032182"></li><li>进入OSS控制台，进行Bucket的配置<img src="https://arionbat-blog.oss-cn-shanghai.aliyuncs.com/img/202201111645163.png?x-oss-process=style/watermark" alt="image-20220111164541125"></li><li>创建子帐号AccessKey,RAM访问控制，新建用户，需要勾选OpenApi访问控制选项，确定后，会出现已生成好的AccessKey和AccessSecret,记得保存好，一会儿配置PicGo的时候需要用到<img src="https://arionbat-blog.oss-cn-shanghai.aliyuncs.com/img/202201111649674.png?x-oss-process=style/watermark" alt="image-20220111164910644"></li><li>为子帐号授予完全访问OSS对象存储的权限<img src="https://arionbat-blog.oss-cn-shanghai.aliyuncs.com/img/202201111652537.png?x-oss-process=style/watermark" alt="image-20220111165225497"></li></ol><h3 id="二、配置PicGo"><a href="#二、配置PicGo" class="headerlink" title="二、配置PicGo"></a>二、配置PicGo</h3><ol><li>配置PicGo默认图床为阿里云OSS并设置基本信息<img src="https://arionbat-blog.oss-cn-shanghai.aliyuncs.com/img/202201111653954.png?x-oss-process=style/watermark" alt="image-20220111165354919"></li><li>拖动图片到状态栏图标，测试图床是否搭建成功</li></ol><h3 id="三、为Typora配置图床"><a href="#三、为Typora配置图床" class="headerlink" title="三、为Typora配置图床"></a>三、为Typora配置图床</h3><p><img src="https://arionbat-blog.oss-cn-shanghai.aliyuncs.com/img/202201111655417.png?x-oss-process=style/watermark" alt="image-20220111165517376"></p><h3 id="四、接下来可以使用Typora配合搭建好的图床，进行愉快的码字了"><a href="#四、接下来可以使用Typora配合搭建好的图床，进行愉快的码字了" class="headerlink" title="四、接下来可以使用Typora配合搭建好的图床，进行愉快的码字了"></a>四、接下来可以使用Typora配合搭建好的图床，进行愉快的码字了</h3>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;一、购买阿里云OSS对象存储搭建图床服务&quot;&gt;&lt;a href=&quot;#一、购买阿里云OSS对象存储搭建图床服务&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="markdown" scheme="https://arionbat.github.io/categories/markdown/"/>
    
    
    <category term="工具" scheme="https://arionbat.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>vuex创建Action的简单封装</title>
    <link href="https://arionbat.github.io/2019/05/18/vuex%E5%88%9B%E5%BB%BAAction%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/"/>
    <id>https://arionbat.github.io/2019/05/18/vuex%E5%88%9B%E5%BB%BAAction%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/</id>
    <published>2019-05-18T15:08:43.000Z</published>
    <updated>2022-01-10T05:56:08.200Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vuex创建Action的简单封装"><a href="#vuex创建Action的简单封装" class="headerlink" title="vuex创建Action的简单封装"></a>vuex创建Action的简单封装</h4><p>在看了 vuex action 的建立方式后，发现写起来比较复杂，于是自己写了个 action 的工具类，方便快速的创建 action</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Arionbat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-05-17 18:31:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Last </span>Modified by: Arionbat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Last </span>Modified time: 2019-05-17 18:46:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 创建Action的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; Commit &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>创建无异步请求的action</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">actionType</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">payload</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createAction = <span class="function">(<span class="params">actionType: string, payload?: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">context: &#123; commit: Commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        context.commit(actionType, payload);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>创建有异步请求的action</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">actionType</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">func</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createApiAction = <span class="function">(<span class="params">actionType: string, func = (params: any) =&gt; &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (context: &#123; <span class="attr">commit</span>: Commit &#125;, <span class="attr">params</span>: any) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> func(params);</span><br><span class="line">        context.commit(actionType, data);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于我的项目的技术栈是 vue+vuex+router+typescript,所以只写了 typescript 的，有需要 js 版本的请参考这个自己更改，下面贴出使用工具类前后的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Commit, Action, ActionTree &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">&#x27;./mutation-types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; State &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> user <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApiAction, createAction &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/action_util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const login: Action&lt;State, any&gt; = (</span></span><br><span class="line"><span class="comment">//   context: &#123; commit: Commit &#125;,</span></span><br><span class="line"><span class="comment">//   userInfo: any</span></span><br><span class="line"><span class="comment">// ) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   user.login(userInfo).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     context.commit(types.SET_TOKEN, res.data.data.token);</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> login = createApiAction(types.LOGIN, user.login);</span><br><span class="line"><span class="keyword">const</span> setToken = createAction(types.SET_TOKEN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions: ActionTree&lt;State, any&gt; = &#123;</span><br><span class="line">    login,</span><br><span class="line">    setToken,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> actions;</span><br></pre></td></tr></table></figure><p>上面代码中，注释掉的部分是之前的没使用工具类的，下面的是使用工具类之后的方式，如有不正确的地方，请大家指正</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;vuex创建Action的简单封装&quot;&gt;&lt;a href=&quot;#vuex创建Action的简单封装&quot; class=&quot;headerlink&quot; title=&quot;vuex创建Action的简单封装&quot;&gt;&lt;/a&gt;vuex创建Action的简单封装&lt;/h4&gt;&lt;p&gt;在看了 vuex</summary>
        
      
    
    
    
    <category term="前端" scheme="https://arionbat.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vuex" scheme="https://arionbat.github.io/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>axios 封装</title>
    <link href="https://arionbat.github.io/2019/05/18/axios%E5%B0%81%E8%A3%85/"/>
    <id>https://arionbat.github.io/2019/05/18/axios%E5%B0%81%E8%A3%85/</id>
    <published>2019-05-18T14:45:59.000Z</published>
    <updated>2022-01-10T04:30:18.096Z</updated>
    
    <content type="html"><![CDATA[<h4 id="通过阅读-axios-中文文档，我对-axios-作出了如下封装："><a href="#通过阅读-axios-中文文档，我对-axios-作出了如下封装：" class="headerlink" title="通过阅读 axios 中文文档，我对 axios 作出了如下封装："></a>通过阅读 axios 中文文档，我对 axios 作出了如下封装：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> QS <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>; <span class="comment">//对发送的数据进行处理</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://192.168.0.197:8088&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(config);</span></span><br><span class="line">        <span class="comment">// 拦截于请求发送之前,可以看到发起的请求中的各项参数，携带的请求头，请求的url以及发给服务端的数据</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">        <span class="comment">// console.log(response);</span></span><br><span class="line">        <span class="comment">// 请求发送完之后接受到的响应数据</span></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//统一定义一个option,通过调用不同方式的请求区构造这个option,最后通过axios(option)去发起请求</span></span><br><span class="line">    <span class="function"><span class="title">baseOption</span>(<span class="params">params: <span class="built_in">any</span>, method?: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; url, data &#125; = params;</span><br><span class="line">        <span class="keyword">let</span> option = &#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">method</span>: !method ? <span class="string">&#x27;get&#x27;</span> : method,</span><br><span class="line">            <span class="attr">data</span>: QS.stringify(data),</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span><br><span class="line">                <span class="attr">Authorization</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> axios(option);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">url: <span class="built_in">string</span>, data?: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> params = &#123; url, data &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.baseOption(params);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">post</span>(<span class="params">url: <span class="built_in">string</span>, data?: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> params = &#123; url, data &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.baseOption(params, <span class="string">&#x27;post&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">put</span>(<span class="params">url: <span class="built_in">string</span>, data?: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> params = &#123; url, data &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.baseOption(params, <span class="string">&#x27;put&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">delete</span>(<span class="params">url: <span class="built_in">string</span>, data?: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> params = &#123; url, data &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.baseOption(params, <span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;通过阅读-axios-中文文档，我对-axios-作出了如下封装：&quot;&gt;&lt;a href=&quot;#通过阅读-axios-中文文档，我对-axios-作出了如下封装：&quot; class=&quot;headerlink&quot; title=&quot;通过阅读 axios 中文文档，我对 axios</summary>
        
      
    
    
    
    <category term="前端" scheme="https://arionbat.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="axios" scheme="https://arionbat.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>npm 和 yarn 命令对比</title>
    <link href="https://arionbat.github.io/2018/12/19/npm%E5%92%8Cyarn%E5%91%BD%E4%BB%A4%E5%AF%B9%E6%AF%94/"/>
    <id>https://arionbat.github.io/2018/12/19/npm%E5%92%8Cyarn%E5%91%BD%E4%BB%A4%E5%AF%B9%E6%AF%94/</id>
    <published>2018-12-19T08:11:21.000Z</published>
    <updated>2022-01-10T04:30:18.096Z</updated>
    
    <content type="html"><![CDATA[<h4 id="npm-和-yarn-命令对比"><a href="#npm-和-yarn-命令对比" class="headerlink" title="npm 和 yarn 命令对比"></a>npm 和 yarn 命令对比</h4><table><thead><tr><th align="center">作用</th><th align="center">npm</th><th align="center">yarn</th></tr></thead><tbody><tr><td align="center">安装</td><td align="center">npm install(i)</td><td align="center">yarn</td></tr><tr><td align="center">全局安装</td><td align="center">npm install xxx –-global</td><td align="center">yarn global add</td></tr><tr><td align="center">卸载</td><td align="center">npm uninstall(un)</td><td align="center">yarn remove</td></tr><tr><td align="center">安装包</td><td align="center">npm install xxx –save(-S)</td><td align="center">yarn add xxx</td></tr><tr><td align="center">开发模式安装包</td><td align="center">npm install xxx –save-dev(-D)</td><td align="center">yarn add xxx –dev(-D)</td></tr><tr><td align="center">更新</td><td align="center">npm update –save</td><td align="center">yarn upgrade</td></tr><tr><td align="center">全局更新</td><td align="center">npm update –global</td><td align="center">yarn global upgrade</td></tr><tr><td align="center">清除缓存</td><td align="center">npm cache clean</td><td align="center">yarn cache clean</td></tr><tr><td align="center">重装</td><td align="center">rm -rf node_modules &amp;&amp; npm install</td><td align="center">yarn upgrade</td></tr></tbody></table>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h4 id=&quot;npm-和-yarn-命令对比&quot;&gt;&lt;a href=&quot;#npm-和-yarn-命令对比&quot; class=&quot;headerlink&quot; title=&quot;npm 和 yarn 命令对比&quot;&gt;&lt;/a&gt;npm 和 yarn</summary>
        
      
    
    
    
    <category term="前端" scheme="https://arionbat.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="工具" scheme="https://arionbat.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库批量更改表与字段编码</title>
    <link href="https://arionbat.github.io/2018/09/26/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%B9%E9%87%8F%E6%9B%B4%E6%94%B9%E8%A1%A8%E4%B8%8E%E5%AD%97%E6%AE%B5%E7%BC%96%E7%A0%81/"/>
    <id>https://arionbat.github.io/2018/09/26/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%B9%E9%87%8F%E6%9B%B4%E6%94%B9%E8%A1%A8%E4%B8%8E%E5%AD%97%E6%AE%B5%E7%BC%96%E7%A0%81/</id>
    <published>2018-09-26T12:41:55.000Z</published>
    <updated>2022-01-10T04:30:18.095Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天在开发过程中遇到一个问题，使用-FIND-IN-SET-和自己写的查询所有子元素及本身的-MySQL-函数时，报’Illegal-mix-of-collations-utf8-general-ci-IMPLICIT-and-utf8-unicode-ci-IMPLICIT-for-operation’-了解到是表的编码出现了问题，于是对整个数据库中的表进行了检查，发现编码不统一的表情况不在少数，于是便想批量改一下数据库中表的编码格式-PS-表太多，一个一个改起来比较费劲-，然后度娘了一下找到了这么一段代码"><a href="#今天在开发过程中遇到一个问题，使用-FIND-IN-SET-和自己写的查询所有子元素及本身的-MySQL-函数时，报’Illegal-mix-of-collations-utf8-general-ci-IMPLICIT-and-utf8-unicode-ci-IMPLICIT-for-operation’-了解到是表的编码出现了问题，于是对整个数据库中的表进行了检查，发现编码不统一的表情况不在少数，于是便想批量改一下数据库中表的编码格式-PS-表太多，一个一个改起来比较费劲-，然后度娘了一下找到了这么一段代码" class="headerlink" title="今天在开发过程中遇到一个问题，使用 FIND_IN_SET 和自己写的查询所有子元素及本身的 MySQL 函数时，报’Illegal mix of collations(utf8_general_ci,IMPLICIT) and (utf8_unicode_ci,IMPLICIT) for operation’,了解到是表的编码出现了问题，于是对整个数据库中的表进行了检查，发现编码不统一的表情况不在少数，于是便想批量改一下数据库中表的编码格式(PS:表太多，一个一个改起来比较费劲)，然后度娘了一下找到了这么一段代码"></a>今天在开发过程中遇到一个问题，使用 FIND_IN_SET 和自己写的查询所有子元素及本身的 MySQL 函数时，报’Illegal mix of collations(utf8_general_ci,IMPLICIT) and (utf8_unicode_ci,IMPLICIT) for operation’,了解到是表的编码出现了问题，于是对整个数据库中的表进行了检查，发现编码不统一的表情况不在少数，于是便想批量改一下数据库中表的编码格式(PS:表太多，一个一个改起来比较费劲)，然后度娘了一下找到了这么一段代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> CONCAT(</span><br><span class="line">  <span class="string">&#x27;ALTER TABLE `&#x27;</span>,</span><br><span class="line">  table_name,</span><br><span class="line">  <span class="string">&#x27;` MODIFY `&#x27;</span>,</span><br><span class="line">  column_name,</span><br><span class="line">  <span class="string">&#x27;` &#x27;</span>,</span><br><span class="line">  DATA_TYPE,</span><br><span class="line">  <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">  CHARACTER_MAXIMUM_LENGTH,</span><br><span class="line">  <span class="string">&#x27;) CHARACTER SET UTF8 COLLATE utf8_unicode_ci&#x27;</span>,</span><br><span class="line">  (</span><br><span class="line">   <span class="keyword">CASE</span></span><br><span class="line">   <span class="keyword">WHEN</span> IS_NULLABLE <span class="operator">=</span> <span class="string">&#x27;NO&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="string">&#x27; NOT NULL&#x27;</span></span><br><span class="line">   <span class="keyword">ELSE</span></span><br><span class="line">    <span class="string">&#x27;&#x27;</span></span><br><span class="line">   <span class="keyword">END</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="string">&#x27;;&#x27;</span></span><br><span class="line"> )</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> information_schema. COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;database&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> DATA_TYPE <span class="operator">=</span> <span class="string">&#x27;text&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> (</span><br><span class="line"> CHARACTER_SET_NAME <span class="operator">!=</span> <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line"> <span class="keyword">OR</span> COLLATION_NAME <span class="operator">!=</span> <span class="string">&#x27;utf8_unicode_ci&#x27;</span></span><br><span class="line">) <span class="keyword">INTO</span> OUTFILE &quot;path/a.txt&quot;;</span><br></pre></td></tr></table></figure><h3 id="CHARACTER-SET-UTF8-COLLATE-utf8-unicode-ci-中的-utf8-和-utf8-unicode-ci-是可以根据应用场景替换的-information-schema，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。在-MySQL-中，把-information-schema-看作是一个数据库，确切说是信息数据库。其中保存着关于-MySQL-服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权-限等。在-INFORMATION-SCHEMA-中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。TABLE-SCHEMA-‘database’-此处的-database-就是你要操作的数据库名-DATA-TYPE-‘text’-的-text-就是你要改变的字段类型，可以是-varchar-等-CHARACTER-SET-NAME-‘utf8’-OR-COLLATION-NAME-‘utf8-unicode-ci’-为判断条件，要改变那些符合范围的表中字段编码”path-a-txt”为文件输出的路径，PS-这个路径需要被数据库承认，如果不知道路径被不被承认，可以先-show-variables-like-‘-secure-’-然后将-secure-file-priv-后的路径和-path-替换-如果你的数据库建立到了服务器上，相应的，你应该到服务器的该路径下去找这个文件"><a href="#CHARACTER-SET-UTF8-COLLATE-utf8-unicode-ci-中的-utf8-和-utf8-unicode-ci-是可以根据应用场景替换的-information-schema，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。在-MySQL-中，把-information-schema-看作是一个数据库，确切说是信息数据库。其中保存着关于-MySQL-服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权-限等。在-INFORMATION-SCHEMA-中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。TABLE-SCHEMA-‘database’-此处的-database-就是你要操作的数据库名-DATA-TYPE-‘text’-的-text-就是你要改变的字段类型，可以是-varchar-等-CHARACTER-SET-NAME-‘utf8’-OR-COLLATION-NAME-‘utf8-unicode-ci’-为判断条件，要改变那些符合范围的表中字段编码”path-a-txt”为文件输出的路径，PS-这个路径需要被数据库承认，如果不知道路径被不被承认，可以先-show-variables-like-‘-secure-’-然后将-secure-file-priv-后的路径和-path-替换-如果你的数据库建立到了服务器上，相应的，你应该到服务器的该路径下去找这个文件" class="headerlink" title="CHARACTER SET UTF8 COLLATE utf8_unicode_ci 中的 utf8 和 utf8_unicode_ci 是可以根据应用场景替换的 information_schema，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。在 MySQL 中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于 MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在 INFORMATION_SCHEMA 中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。TABLE_SCHEMA = ‘database’ 此处的 database 就是你要操作的数据库名 DATA_TYPE = ‘text’ 的 text 就是你要改变的字段类型，可以是 varchar 等 CHARACTER_SET_NAME != ‘utf8’ OR COLLATION_NAME != ‘utf8_unicode_ci’ 为判断条件，要改变那些符合范围的表中字段编码”path/a.txt”为文件输出的路径，PS:这个路径需要被数据库承认，如果不知道路径被不被承认，可以先 show variables like ‘%secure%’;然后将 secure_file_priv 后的路径和 path 替换,如果你的数据库建立到了服务器上，相应的，你应该到服务器的该路径下去找这个文件"></a>CHARACTER SET UTF8 COLLATE utf8_unicode_ci 中的 utf8 和 utf8_unicode_ci 是可以根据应用场景替换的 information_schema，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。在 MySQL 中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于 MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在 INFORMATION_SCHEMA 中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。TABLE_SCHEMA = ‘database’ 此处的 database 就是你要操作的数据库名 DATA_TYPE = ‘text’ 的 text 就是你要改变的字段类型，可以是 varchar 等 CHARACTER_SET_NAME != ‘utf8’ OR COLLATION_NAME != ‘utf8_unicode_ci’ 为判断条件，要改变那些符合范围的表中字段编码”path/a.txt”为文件输出的路径，PS:这个路径需要被数据库承认，如果不知道路径被不被承认，可以先 show variables like ‘%secure%’;然后将 secure_file_priv 后的路径和 path 替换,如果你的数据库建立到了服务器上，相应的，你应该到服务器的该路径下去找这个文件</h3>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h3</summary>
        
      
    
    
    
    <category term="数据库" scheme="https://arionbat.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://arionbat.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>初识 Vue</title>
    <link href="https://arionbat.github.io/2018/09/26/%E5%88%9D%E8%AF%86Vue/"/>
    <id>https://arionbat.github.io/2018/09/26/%E5%88%9D%E8%AF%86Vue/</id>
    <published>2018-09-25T16:07:05.000Z</published>
    <updated>2022-01-10T04:30:18.098Z</updated>
    
    <content type="html"><![CDATA[<h5 id="之前就想学-Vue，一直被拖着，今天总算找了一下午时间看了一下，发现-Vue-的数据渲染模式和微信小程序，差不多-PS-我是先做的小程序开发，后接触的-Vue-我知道微信小程序借鉴了一些-Vue-的理念-，今天在和-element-ui-结合使用的时候，发现了一些问题，记录一下"><a href="#之前就想学-Vue，一直被拖着，今天总算找了一下午时间看了一下，发现-Vue-的数据渲染模式和微信小程序，差不多-PS-我是先做的小程序开发，后接触的-Vue-我知道微信小程序借鉴了一些-Vue-的理念-，今天在和-element-ui-结合使用的时候，发现了一些问题，记录一下" class="headerlink" title="之前就想学 Vue，一直被拖着，今天总算找了一下午时间看了一下，发现 Vue 的数据渲染模式和微信小程序，差不多(PS:我是先做的小程序开发，后接触的 Vue,我知道微信小程序借鉴了一些 Vue 的理念)，今天在和 element ui 结合使用的时候，发现了一些问题，记录一下"></a>之前就想学 Vue，一直被拖着，今天总算找了一下午时间看了一下，发现 Vue 的数据渲染模式和微信小程序，差不多(PS:我是先做的小程序开发，后接触的 Vue,我知道微信小程序借鉴了一些 Vue 的理念)，今天在和 element ui 结合使用的时候，发现了一些问题，记录一下</h5><ol><li>在使用 element ui 封装组件的时候，非 html 原生元素，添加 ref,需要在 vue 生命周期的 mountedz 中去使用，直接使用 this.$refs.{ref}的话会显示 undefined。</li><li>在注册组件的时候，组件页面只能有一个根节点。</li><li>export default 和 new Vue 的功能基本一致，，不同的是绑定元素一个是 name,一个是 el 或许是我的了解比较片面，export default 是 es6 的语法。</li><li>目前只有这些，待续</li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h5</summary>
        
      
    
    
    
    <category term="前端" scheme="https://arionbat.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://arionbat.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
